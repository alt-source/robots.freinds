{"version":3,"sources":["serviceWorker.js","component/Card.js","component/CardList.js","component/SearchBox.js","component/Scrolle.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scrolle","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCPSC,EAVF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACrB,OACI,yBAAKC,UAAU,0CAEnB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,KAC/C,4BAAKC,GACF,2BAAIC,KCOII,EAVE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GAAP,OACjC,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAEvE,OACI,yBAAKC,UAAU,MACVK,ICCEK,EAVG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAChB,OACI,yBAAKX,UAAU,UACX,2BAAOA,UAAU,gDACjBY,KAAK,SACJC,YAAY,eACZC,SAAUH,MCARI,EANC,SAACC,GACb,OACA,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAAaJ,EAAMK,WCiC1EC,E,kDA/Bf,aAAc,IAAD,8BACT,gBAWJC,eAAiB,SAACC,GAClB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAXrC,EAAKC,MAAO,CACRzB,OAAQ,GACRsB,YAAa,IAJR,E,gEAOO,IAAD,OACfI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACrB,OAAQ8B,S,+BAM5B,IAAD,OACEC,EAAeC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAC,GAC1C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAExE,OACI,6BACI,wBAAIvC,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWW,aAAcyB,KAAKb,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQ+B,U,GA1BdM,IAAMC,WCGxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SNuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4903a1bb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nconst Card = ({id, name, email})=>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow'>\r\n       \r\n    <img alt='ROBOTS' src={`https://robohash.org/${id}`} />\r\n    <h2>{name}</h2>\r\n       <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from '../component/Card';\r\n\r\n\r\nconst CardList = ({robots})=> {\r\n    const cardComponent = robots.map((user, i)=> \r\n    <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    )\r\n    return(\r\n        <div className='tc'>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox = ({searchChange})=>{\r\n    return (\r\n        <div className='tc pa2'>\r\n            <input className='pa3 ba b--dotted bw1 b--blue bg-lightest-blue' \r\n            type='search'\r\n             placeholder='Rebots Names'\r\n             onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox","import React from 'react';\r\nconst Scrolle = (props)=>{\r\n    return(\r\n    <div style={{overflow: 'scroll', border:'5px solid black', height:'800px' }} >{props.children}</div>\r\n        \r\n    )\r\n}\r\nexport default Scrolle","import React from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport Scrolle from '../component/Scrolle';\r\nclass App extends React.Component {\r\nconstructor(){\r\n    super()\r\n    this.state ={\r\n        robots: [],\r\n        searchField: ''\r\n    }\r\n}\r\ncomponentDidMount(){\r\n    fetch('http://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(users=> this.setState({robots: users}))\r\n}\r\nonSearchChange = (event)=>{\r\nthis.setState({searchField: event.target.value})   \r\n    \r\n}\r\n    render(){\r\n        const filterRobots = this.state.robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        } )\r\n    return(\r\n        <div>\r\n            <h1 className=\"tc\">Hello Freinds</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scrolle>\r\n              <CardList robots={filterRobots} />\r\n            </Scrolle>\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}